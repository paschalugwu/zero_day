User
For this project:
'
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ tree
.
├── README.md
├── flask_ambrosial
│   ├── __init__.py
│   ├── forms.py
│   ├── models.py
│   ├── routes.py
│   ├── static
│   │   ├── main.css
│   │   └── profile_pics
│   │       ├── 25646d3a1f450286.jpg
│   │       ├── 3522ec35be4c968d.jpg
│   │       ├── 3eae9671e8b95ec7.jpg
│   │       └── default.jpg
│   └── templates
│       ├── about.html
│       ├── account.html
│       ├── home.html
│       ├── layout.html
│       ├── login.html
│       └── register.html
├── instance
│   └── site.db
└── run.py

5 directories, 18 files
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ 

', with associating codes:
''
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/__init__.py
#!/usr/bin/env python3
"""Initialization of the Flask application and its extensions."""

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager

# Initialize the Flask application
app = Flask(__name__)

# Secret key for securing the session
app.config['SECRET_KEY'] = '5791628bb0b13ce0c676dfde280ba245'

# Database configuration
# Using SQLite for this example, 'site.db' \
# will be created in the current directory
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'

# Create an SQLAlchemy database instance
db = SQLAlchemy(app)

# Create a Bcrypt instance for password hashing
bcrypt = Bcrypt(app)

# Create a LoginManager instance for managing user sessions
login_manager = LoginManager(app)

# Configure the login view for redirecting unauthorized users
login_manager.login_view = 'login'

# Configure the message category for flashing messages
login_manager.login_message_category = 'info'

# Import routes module to ensure routes are registered
from flask_ambrosial import routes

""" Note: The routes module must be imported after creating \
    the Flask app
- This is to avoid circular imports, as routes might need \
    to import things from this file
- By importing routes after creating the app, the app instance \
    is already defined and can be used in the routes module for \
        defining the routes and their functionalities
"""
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/forms.py
#!/usr/bin/python3
"""Forms for user registration, login, and account update."""

from flask_wtf import FlaskForm
from flask_wtf.file import FileField, FileAllowed
from flask_login import current_user
from wtforms import StringField, PasswordField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError
from flask_ambrosial.models import User

class RegistrationForm(FlaskForm):
    """Form for user registration."""

    def validate_username(self, username):
        """
        Validate if the username is already taken.

        Args:
            username (str): The username entered by the user.

        Raises:
            ValidationError: If a user with the same username already exists.
        """
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('That username is taken. \
                Please choose a different one.')

    def validate_email(self, email):
        """
        Validate if the email is already registered.

        Args:
            email (str): The email entered by the user.

        Raises:
            ValidationError: If a user with the same email already exists.
        """
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('That email is taken. \
                Please choose a different one.')

class LoginForm(FlaskForm):
    """Form for user login."""

class UpdateAccountForm(FlaskForm):
    """Form for updating user account."""

    def validate_username(self, username):
        """
        Validate if the username is already taken during account update.

        Args:
            username (str): The username entered by the user.

        Raises:
            ValidationError: If a user with the same username already exists.
        """
        if username.data != current_user.username:
            user = User.query.filter_by(username=username.data).first()
            if user:
                raise ValidationError('That username is taken. \
                    Please choose a different one.')

    def validate_email(self, email):
        """
        Validate if the email is already registered during account update.

        Args:
            email (str): The email entered by the user.

        Raises:
            ValidationError: If a user with the same email already exists.
        """
        if email.data != current_user.email:
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError('That email is taken. \
                    Please choose a different one.')
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/models.py
#!/usr/bin/env python3
"""Database models for User and Post entities."""

from flask_ambrosial import db, login_manager
from datetime import datetime, timezone
from flask_login import UserMixin


@login_manager.user_loader
def load_user(user_id):
    """Load a user by ID for Flask-Login."""
    return User.query.get(int(user_id))


class User(db.Model, UserMixin):
    """User model for storing user information."""

    # User attributes: id, username, email, image_file, password
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20),
                           nullable=False, default='default.jpg')
    password = db.Column(db.String(60), nullable=False)

    """ Relationship with Post model, one-to-many
    relationship (one user can have multiple posts) """
    posts = db.relationship('Post', backref='author', lazy=True)

    def __repr__(self):
        """Representation of the User object."""
        return f"User('{self.username}', '{self.email}', '{self.image_file}')"


class Post(db.Model):
    """Post model for storing user posts."""

    # Post attributes: id, title, date_posted, content, user_id
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime,
                            nullable=False,
                            default=datetime.now(timezone.utc))
    content = db.Column(db.Text, nullable=False)
    # Foreign key relationship with User model, each post belongs to a user
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        """Representation of the Post object."""
        return f"Post('{self.title}', '{self.date_posted}')"
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/routes.py
#!/usr/bin/env python3
"""Routes and views for the Flask app."""

import secrets
import os
from PIL import Image
from flask import render_template, url_for, flash, redirect, request
from flask_ambrosial import app, db, bcrypt
from flask_ambrosial.forms import RegistrationForm, LoginForm, UpdateAccountForm
from flask_ambrosial.models import User, Post
from flask_login import login_user, current_user, logout_user, login_required

# Sample posts data (temporary)
posts = [
    {
        'author': 'Ugwu Paschal',
        'title': 'How to prepare Jollof Rice.',
        'content': 'Jollof rice, a beloved West African dish, \
            is a flavorful one-pot meal. Made from rice, \
                tomatoes, onions, peppers, and aromatic spices, \
                    it’s a staple during holidays, weddings, \
                        and special events. Customize it with \
                            your favorite veggies and pair it \
                                with fried plantains for a \
                                    delightful feast!',
        'date_posted': 'April 18, 2024'
    },
    {
        'author': 'Amarachi Nnanta',
        'title': 'Prepare Egusi Soup Like A Pro.',
        'content': 'Egusi soup, a Nigerian delicacy, \
            is rich and flavorful. To prepare it like a pro, \
                heat oil in a pot and sauté onions. Add \
                    ingredients (except ground egusi) and boil \
                        for 3 minutes. Stir in ground egusi, \
                            adjusting water for desired \
                                consistency. Cook on low heat \
                                    for 15-20 minutes, and \
                                        serve with yam, rice, \
                                            or grilled meat.',
        'date_posted': 'April 19, 2024'
    }
]

@app.route("/")
@app.route("/home")
def home():
    """Render the home page with posts."""
    return render_template('home.html', posts=posts)

@app.route("/about")
def about():
    """Render the about page."""
    return render_template('about.html', title='About')

@app.route("/register", methods=['GET', 'POST'])
def register():
    """Handle user registration.

    If the user is already authenticated, redirects to the home page.
    If the registration form is submitted, validates the form data, hashes
    the password, creates a new user, adds them to the database, and redirects
    to the login page.
    """
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data)\
            .decode('utf-8')
        user = User(username=form.username.data,
                    email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash(f'Your account has been created! \
            You are now able to log in', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)

@app.route("/login", methods=['GET', 'POST'])
def login():
    """Handle user login.

    If the user is already authenticated, redirects to the home page.
    If the login form is submitted, validates the form data, checks if the
    user exists and the password is correct, logs in the user, and redirects
    to the next page or home page.
    """
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password,
                                               form.password.data):
            login_user(user, remember=form.remember.data)
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else \
                redirect(url_for('home'))
        else:
            flash('Login Unsuccessful. \
                Please check email and password', 'danger')
    return render_template('login.html', title='Login', form=form)

@app.route("/logout")
def logout():
    """Handle user logout.

    Logs out the user and redirects to the home page.
    """
    logout_user()
    return redirect(url_for('home'))

def save_picture(form_picture):
    """Save and resize the user's profile picture.

    Args:
        form_picture: The file containing the user's profile picture.

    Returns:
        str: The filename of the saved picture.
    """
    random_hex = secrets.token_hex(8)
    _, f_ext = os.path.splitext(form_picture.filename)
    picture_fn = random_hex + f_ext
    picture_path = os.path.join(app.root_path, 'static/profile_pics', picture_fn)
    output_size = (125, 125)
    i = Image.open(form_picture)
    i.thumbnail(output_size)
    i.save(picture_path)
    return picture_fn

@app.route("/account", methods=['GET', 'POST'])
@login_required
def account():
    """Handle user account settings and update.

    Renders the account page with the update account form. If the form is
    submitted and valid, updates the user's account information and picture.
    """
    form = UpdateAccountForm()
    if form.validate_on_submit():
        if form.picture.data:
            picture_file = save_picture(form.picture.data)
            current_user.image_file = picture_file
        current_user.username = form.username.data
        current_user.email = form.email.data
        db.session.commit()
        flash('Your account has been updated!', 'success')
        return redirect(url_for('account'))
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.email.data = current_user.email
    image_file = url_for('static', filename='profile_pics/' + current_user.image_file)
    return render_template('account.html', title='Account',
                           image_file=image_file, form=form)
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/static/main.css
/* CSS styles for the Flask app */

/* General body styling */
body {
    background: #fafafa;  /* Background color */
    color: #333333;       /* Text color */
    margin-top: 5rem;     /* Margin top for content */
}

/* Headings styling */
h1, h2, h3, h4, h5, h6 {
    color: #444444;  /* Heading text color */
}

/* Background color for specific section */
.bg-steel {
    background-color: #702963;  /* Dark background color */
}

/* Styling for navigation links */
.site-header .navbar-nav .nav-link {
    color: #cbd5db;  /* Navigation link text color */
}

/* Hover effect for navigation links */
.site-header .navbar-nav .nav-link:hover {
    color: #ffffff;  /* Hovered navigation link text color */
}

/* Active link styling */
.site-header .navbar-nav .nav-link.active {
    font-weight: 500;  /* Font weight for active link */
}

/* Styling for content sections */
.content-section {
    background: #ffffff;       /* Background color */
    padding: 10px 20px;        /* Padding inside the section */
    border: 1px solid #dddddd; /* Border color and width */
    border-radius: 3px;        /* Border radius for rounded corners */
    margin-bottom: 20px;       /* Bottom margin */
}

/* Styling for article titles */
.article-title {
    color: #444444;  /* Article title text color */
}

/* Hover effect for article titles */
a.article-title:hover {
    color: #428bca;  /* Hovered article title text color */
    text-decoration: none;  /* Remove underline on hover */
}

/* Styling for article content */
.article-content {
    white-space: pre-line;  /* Preserve line breaks */
}

/* Styling for article images */
.article-img {
    height: 65px;    /* Height of the image */
    width: 65px;     /* Width of the image */
    margin-right: 16px;  /* Right margin */
}

/* Styling for article metadata */
.article-metadata {
    padding-bottom: 1px;  /* Padding at the bottom */
    margin-bottom: 4px;   /* Bottom margin */
    border-bottom: 1px solid #e3e3e3;  /* Border color and width */
}

/* Hover effect for article metadata links */
.article-metadata a:hover {
    color: #333;  /* Hovered metadata link text color */
    text-decoration: none;  /* Remove underline on hover */
}

/* Styling for SVG icons in articles */
.article-svg {
    width: 25px;    /* Width of the SVG icon */
    height: 25px;   /* Height of the SVG icon */
    vertical-align: middle;  /* Vertical alignment */
}

/* Styling for user account images */
.account-img {
    height: 125px;   /* Height of the image */
    width: 125px;    /* Width of the image */
    margin-right: 20px;   /* Right margin */
    margin-bottom: 16px;  /* Bottom margin */
}

/* Styling for account heading */
.account-heading {
    font-size: 2.5rem;  /* Font size for account heading */
}
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/templates/about.html
{% extends "layout.html" %}
{% block content %}
    <!-- This block extends the base template "layout.html" and defines the content for the "content" block -->

    <h1>About Ambrosial</h1>
    <!-- This is the main heading for the About page -->

{% endblock content %}
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/templates/account.html
{% extends "layout.html" %}

{% block content %}
    <div class="content-section">
      <!-- Media section for displaying user profile information -->
      <div class="media">
        <!-- User profile image -->
        <img class="rounded-circle account-img" src="{{ image_file }}">
        <div class="media-body">
          <!-- User's username -->
          <h2 class="account-heading">{{ current_user.username }}</h2>
          <!-- User's email -->
          <p class="text-secondary">{{ current_user.email }}</p>
        </div>
      </div>
        <!-- Form for updating account information -->
        <form method="POST" action="" enctype="multipart/form-data">
            <!-- CSRF token for form submission security -->
            {{ form.hidden_tag() }}
            <!-- Fieldset for grouping form elements -->
            <fieldset class="form-group">
                <!-- Legend for grouping form fields -->
                <legend class="border-bottom mb-4">Account Info</legend>
                <!-- Username field -->
                <div class="form-group">
                    <!-- Label for the username field -->
                    {{ form.username.label(class="form-control-label") }}
                    {% if form.username.errors %}
                        <!-- Input field for username with validation errors -->
                        {{ form.username(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.username.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <!-- Input field for username without errors -->
                        {{ form.username(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Email field -->
                <div class="form-group">
                    <!-- Label for the email field -->
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        <!-- Input field for email with validation errors -->
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.email.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <!-- Input field for email without errors -->
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Profile picture upload field -->
                <div class="form-group">
                  <!-- Label for the profile picture field -->
                  {{ form.picture.label() }}
                  <!-- Input field for uploading profile picture -->
                  {{ form.picture(class="form-control-file") }}
                  {% if form.picture.errors %}
                      <!-- Display errors if any -->
                      {% for error in form.picture.errors %}
                          <span class="text-danger">{{ error }}</span></br>
                      {% endfor %}
                  {% endif %}
              </div>
            </fieldset>
            <!-- Submit button -->
            <div class="form-group">
                {{ form.submit(class="btn btn-outline-info") }}
            </div>
        </form>
    </div>
{% endblock content %}
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/templates/home.html
{% extends "layout.html" %}
{% block content %}
    <!-- This block extends the base template "layout.html" and defines the content for the "content" block -->

    {% for post in posts %}
        <!-- This loop iterates through the "posts" variable passed to the template -->
        <article class="media content-section">
            <!-- Each post is displayed within an article tag with the "media" and "content-section" classes -->
            <div class="media-body">
                <!-- The main body of the post is contained within the "media-body" div -->
                <div class="article-metadata">
                    <!-- Metadata for the post, such as author and date -->
                    <a class="mr-2" href="#">{{ post.author }}</a>
                    <!-- Displays the author of the post -->
                    <small class="text-muted">{{ post.date_posted }}</small>
                    <!-- Displays the date the post was posted -->
                </div>
                <h2><a class="article-title" href="#">{{ post.title }}</a></h2>
                <!-- Displays the title of the post as a clickable link -->
                <p class="article-content">{{ post.content }}</p>
                <!-- Displays the content of the post -->
            </div>
        </article>
    {% endfor %}
{% endblock content %}
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/templates/layout.html
<!DOCTYPE html>
<html>
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <!-- Link to custom CSS -->
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='main.css') }}">
    
    {% if title %}
        <!-- Title for the page, includes 'Ambrosial' and optional 'title' passed from Flask -->
        <title>Ambrosial - {{ title }}</title>
    {% else %}
        <title>Ambrosial</title>
    {% endif %}
</head>
<body>
    <!-- Header with navigation -->
    <header class="site-header">
      <nav class="navbar navbar-expand-md navbar-dark bg-steel fixed-top">
        <div class="container">
          <a class="navbar-brand mr-4" href="/">Ambrosial</a>
          <!-- Responsive navbar toggler for mobile -->
          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggle" aria-controls="navbarToggle" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <!-- Navbar links -->
          <div class="collapse navbar-collapse" id="navbarToggle">
            <div class="navbar-nav mr-auto">
              <a class="nav-item nav-link" href="{{ url_for('home') }}">Home</a>
              <a class="nav-item nav-link" href="{{ url_for('about') }}">About</a>
            </div>
            <!-- Navbar Right Side, dynamic links based on user authentication -->
            <div class="navbar-nav">
              {% if current_user.is_authenticated %}
                <a class="nav-item nav-link" href="{{ url_for('account') }}">Account</a>
                <a class="nav-item nav-link" href="{{ url_for('logout') }}">Logout</a>
              {% else %}
                <a class="nav-item nav-link" href="{{ url_for('login') }}">Login</a>
                <a class="nav-item nav-link" href="{{ url_for('register') }}">Register</a>
              {% endif %}
            </div>
          </div>
        </div>
      </nav>
    </header>

    <!-- Main content section with a container -->
    <main role="main" class="container">
      <div class="row">
        <div class="col-md-8">
          <!-- Flash messages, displayed if any -->
          {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
              {% for category, message in messages %}
                <div class="alert alert-{{ category }}">
                  {{ message }}
                </div>
              {% endfor %}
            {% endif %}
          {% endwith %}
          <!-- Content block, this part will be replaced by child templates -->
          {% block content %}{% endblock %}
        </div>
        <!-- Sidebar on the right side -->
        <div class="col-md-4">
          <div class="content-section">
            <h3>Our Sidebar</h3>
            <p class='text-muted'>You can put any information here you'd like.
              <ul class="list-group">
                <li class="list-group-item list-group-item-light">Latest Posts</li>
                <li class="list-group-item list-group-item-light">Announcements</li>
                <li class="list-group-item list-group-item-light">Calendars</li>
                <li class="list-group-item list-group-item-light">etc</li>
              </ul>
            </p>
          </div>
        </div>
      </div>
    </main>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
</body>
</html>
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/templates/login.html
{% extends "layout.html" %}
{% block content %}
    <!-- Login form section -->
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <!-- Fieldset for grouping form elements -->
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Log In</legend>
                <!-- Email field -->
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.email.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Password field -->
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {% if form.password.errors %}
                        {{ form.password(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.password.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.password(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Remember Me checkbox -->
                <div class="form-check">
                    {{ form.remember(class="form-check-input") }}
                    {{ form.remember.label(class="form-check-label") }}
                </div>
            </fieldset>
            <!-- Submit button -->
            <div class="form-group">
                {{ form.submit(class="btn btn-outline-info") }}
            </div>
            <!-- Forgot Password link -->
            <small class="text-muted ml-2">
                <a href="#">Forgot Password?</a>
            </small>
        </form>
    </div>
    <!-- Sign up link -->
    <div class="border-top pt-3">
        <small class="text-muted">
            Need An Account? <a class="ml-2" href="{{ url_for('register') }}">Sign Up Now</a>
        </small>
    </div>
{% endblock content %}
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat flask_ambrosial/templates/register.html
{% extends "layout.html" %}

{% block content %}
    <!-- Registration form section -->
    <div class="content-section">
        <!-- Form for user registration -->
        <form method="POST" action="">
            <!-- CSRF token for form submission security -->
            {{ form.hidden_tag() }}
            <!-- Fieldset for grouping form elements -->
            <fieldset class="form-group">
                <!-- Legend for grouping form fields -->
                <legend class="border-bottom mb-4">Join Today</legend>
                <!-- Username field -->
                <div class="form-group">
                    <!-- Label for the username field -->
                    {{ form.username.label(class="form-control-label") }}
                    {% if form.username.errors %}
                        <!-- Input field for username with validation errors -->
                        {{ form.username(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.username.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <!-- Input field for username without errors -->
                        {{ form.username(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Email field -->
                <div class="form-group">
                    <!-- Label for the email field -->
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        <!-- Input field for email with validation errors -->
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.email.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <!-- Input field for email without errors -->
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Password field -->
                <div class="form-group">
                    <!-- Label for the password field -->
                    {{ form.password.label(class="form-control-label") }}
                    {% if form.password.errors %}
                        <!-- Input field for password with validation errors -->
                        {{ form.password(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.password.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <!-- Input field for password without errors -->
                        {{ form.password(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <!-- Confirm Password field -->
                <div class="form-group">
                    <!-- Label for the confirm password field -->
                    {{ form.confirm_password.label(class="form-control-label") }}
                    {% if form.confirm_password.errors %}
                        <!-- Input field for confirm password with validation errors -->
                        {{ form.confirm_password(class="form-control form-control-lg is-invalid") }}
                        <!-- Display errors if any -->
                        <div class="invalid-feedback">
                            {% for error in form.confirm_password.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        <!-- Input field for confirm password without errors -->
                        {{ form.confirm_password(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
            </fieldset>
            <!-- Submit button -->
            <div class="form-group">
                <!-- Button to submit the registration form -->
                {{ form.submit(class="btn btn-outline-info") }}
            </div>
        </form>
    </div>
    <!-- Sign in link -->
    <div class="border-top pt-3">
        <!-- Link to redirect users to the sign-in page if they already have an account -->
        <small class="text-muted">
            Already Have An Account? <a class="ml-2" href="{{ url_for('login') }}">Sign In</a>
        </small>
    </div>
{% endblock content %}
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ cat run.py
#!/usr/bin/env python3
"""Entry point for running the Flask application."""

from flask_ambrosial import app

if __name__ == '__main__':
    # Run the Flask application
    # - debug=True enables debug mode for development
    # - This means the server will reload on code changes and
    #   provide more detailed error messages
    app.run(debug=True)
(venv) paschalugwu@DESKTOP-CDE41BB:~/Ambrosial/07-User-Account-Profile-Pic$ 

''. Write me an efficient README. to show the interactions of each of these codes to bring about the functionalities of our app and describe the behaviours our app will display as well. At the top of the README.md file, also add the tree.
